Intermediate Python Programming
1. Efficiency and scalability
2. Maintainability
3. Modularity (generalisation)

PEP 8 - A Style guide for Python Code

import this - The Zen of Python

n1. join scales better, uses less processing
n2. import os to access files not in directory

Command line interfaces (CLI)
cron : cron is a time-based job scheduler in Unix-like computer operating systems.
       Users that set up and maintain software environments use cron to schedule
       jobs (commands or shell scripts) to run periodically at fixed times, dates, or intervals.

import argparse - this module is used to write command line interfaces.
                  The program defines arguments required and argparse figures out how to parse them

import sys - this module (System-specific parameters and functions) provides access to
             some variables used or maintained by the interpreter


List Comprehension and Generators

n3. range is a generator, generates a stream in the range m to n
n4. lists are faster in most cases but they use memory whereas generators do not use memory
n5. work your way backwards for [function() and for] statements

Timeit module

import timeit - measures execution time of python code snippets

n6. timeit.timeit requires all code
n7. using enumerate for dictionaries
n8. using zip
n9. for loop vs list comprehension (values dont get stored or overwritten)

Multiprocessing

GIL : Global Interpreter Lock, memory management safeguard

